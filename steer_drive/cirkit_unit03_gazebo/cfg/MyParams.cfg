#!/usr/bin/env python
# -*- coding: utf-8 -*-
PACKAGE = 'cirkit_unit03_gazebo'


import roslib; roslib.load_manifest(PACKAGE)


from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#list of parameters
gen.add('SPEED_SAFFETY', double_t, 0, "description for the integer parameter", 1, 0, 5) #velocidade minima 
gen.add('SPEED_REQUIRED', double_t, 0, "description for the string parameter", 10, 0, 20) #velocidade maxima 
gen.add('MAX_STEERING_ANGLE', double_t, 0, "description for the integer parameter", 41.5, 0, 50) #max angulo volante
gen.add('MIN_STEERING_ANGLE', double_t, 0, "description for the integer parameter", 20, 0, 50) #max angulo volante
# gen.add('TRAJECTORY_ANGLE', double_t, 0, "description for the integer parameter", 3, 0, 10) #angulo volante de cada iteracao
gen.add('NUM_TRAJ', int_t, 0, "description for the integer parameter", 15, 0, 30) #nº traj geradas
gen.add('NUM_NODES', int_t, 0, "description for the integer parameter", 10, 0, 20)
gen.add('APdistMax', double_t, 0, "description for the integer parameter", 10, 0, 40) # maximum_admissible_to_DAP
gen.add('APdistMin', double_t, 0, "description for the integer parameter", 5, 0, 10)
gen.add('DetectDist', double_t, 0, "description for the integer parameter", 40, 0, 50) # 
gen.add('DLO_Max', double_t, 0, "description for the integer parameter", 10, 0, 40) # maximum_admissible_to_DLO
gen.add('Detection_Sensitivity', double_t, 0, "description for the integer parameter", 2, 1, 10) # maximum_admissible_to_DLO
gen.add('TRAJ_DENSITY', double_t, 0, "description for the integer parameter", 2, 1.2, 2) # maximum_admissible_to_DLO
gen.add('DETECT_SPACE_SENSIVITY', double_t, 0, "description for the integer parameter", 0.02, 0, 0.1) # distancia de segunrança da zona de deteção dos objetos
gen.add('DETECT_SPACE_Dist', double_t, 0, "description for the integer parameter", 0.5, 0, 1) # distancia maxima em (y) -> utilizado para restringir os pontos utilizados no espaço de detacao
gen.add('WaitingTime', double_t, 0, "description for the integer parameter", 5, 0, 10) # tempo de espera antes de voltar para a via da direita após uma ultrapassagem

# Trajectory weigths
gen.add('W_DAP', double_t, 0, "description for the integer parameter", 0.10, 0, 1)
gen.add('W_ADAP', double_t, 0, "description for the integer parameter", 0.00, 0, 1)
gen.add('W_DLO', double_t, 0, "description for the integer parameter", 0.90, 0, 1)

# Simulation
# gen.add('simul', bool_t, 0, "description for the integer parameter", True)
gen.add('LINES', bool_t, 0, "description for the integer parameter", True)
gen.add('AP_right', bool_t, 0, "description for the integer parameter", True)
gen.add('AP_left', bool_t, 0, "description for the integer parameter", False)
# gen.add('WAYPOINTS', bool_t, 0, "description for the integer parameter", False)

gen.add('OVERTAKING', bool_t, 0, "description for the integer parameter", False)
gen.add('DETECTION', bool_t, 0, "description for the integer parameter", False)
gen.add('DETECTION_BACK', bool_t, 0, "description for the integer parameter", False)
gen.add('MANUAL_OVERTAKING', bool_t, 0, "description for the integer parameter", False)

exit(gen.generate(PACKAGE, PACKAGE, "MyParams"))